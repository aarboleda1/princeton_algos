[ x ] Linked List
[ x ] Dynamic array, implemented with a ring buffer (use a statically sized array underneath the hood)
[ ] Hash set
[ ] Hash map (with chaining)
[ x ] Binary heap (without decrease-key; know that Fibonacci heaps exist and know their guarantees)
[ ] Binary search tree (doesn’t need to be self-balancing; know that self-balancing trees exist and know their guarantees)
[ ] Prefix tree (a.k.a. trie)
[ ] Suffix tree (don’t worry about compression, just build a dumb version; know that Ukkonen’s algorithm exists and learn its guarantees)
[ ] An object-oriented adjacency list for graphs


[ ] Binary search (implement it both iteratively and recursively)
[ ] Randomized quicksort (pay extra attention to the partition subroutine, as it’s useful in a lot of places)
[ ] Mergesort
[ ] Breadth-first search in a graph
[ ] Depth-first search in a graph (augment it to detect cycles)
[ ] Tree traversals (pre-order, in-order, post-order)
[ ] Topological sort (using Tarjan’s algorithm)
[ ] Dijkstra’s algorithm (without decrease-key)
[ ] Longest common subsequence (using dynamic programming with matrices)
[ ] Knapsack problem (also dynamic programming)

Learn about heap sort, but don’t bother coding it. Know that it’s O(1) space but practically
very slow due to cache-inefficiency. Learn about quickselect and median-of-medians.
